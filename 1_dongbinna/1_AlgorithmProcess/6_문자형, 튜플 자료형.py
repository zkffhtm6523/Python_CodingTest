# 1. 문자열 자료형
# 문자열 변수를 초기화할 때는 큰따옴표(")나 작은 따옴표(')를 이용합니다.
# 문자열 안에 큰따옴표나 작은따옴표가 포함되어야 하는 경우가 있습니다.
#     - 전체 문자열을 큰따옴표로 구성하는 경우, 내부적으로 작은 따옴표를 포함할 수 있음
#     - 전체 문자열을 작은따옴표로 구성하는 경우, 내부적으로 큰따옴표를 포함할 수 있음
#     - 혹은 백슬래시(\)를 사용하면, 큰따옴표나 작은따옴표를 원하는 만큼 포함시킬 수 있음

data = "Don't you know \"Python\"?"
print(data)

# 문자열 연산
# 문자열 변수에 덧셈(+)을 이용하면 문자열이 더해져서 연결(Concatenate)됩니다
# 문자열 변수를 특정한 양의 정수와 곱하는 경우, 문자열이 그 값만큼 여러 번 더해짐
# 문자열에 대해서도 마찬가지로 인덱싱과 슬라이싱 이용 가능
#     - 다만 문쟈열은 특정 인덱스의 값을 변경할 수 없음

a = "String"
print(a * 3)

a = "ABCDEF"
print(a[2 : 4])

# 2. 튜플 자료형
# 튜플 자료형은 리스트와 유사하지만 다음과 같은 문법적 차이 존재
#     - 튜플은 한 번 선언된 값을 변경할 수 없음
#     - 리스트는 대괄호([])를 이용하지만, 튜플은 소괄호(())를 이용
# 튜플은 리스트에 비해 상대적으로 공간 효율적

a = (1, 2, 3, 4, 5, 6, 7, 8, 9)

print(a[3])
print(a[2:4])

# 튜플 사용 경우
# 서로 다른 성질의 데이터를 묶어서 관리할 때
#     - 최단 경로 알고리즘에서 (비용, 노드번호)의 형태로 튜플 자료형을 자주 사용
# 데이터의 나열을 해싱(Hashing)의 키 값으로 사용해야 할 때
#     - 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있음
# 리스트보다 메모리를 효율적으로 사용해야 할 때

# 3. 사전 자료형
# 키와 값의 쌍을 데이터로 가지는 자료형
#     - 앞서 다루었던 리스트나 튜플이 값을 순차적으로 저장하는 것과 대비
#     - 원하는 '변경 불가능한 자료형'을 키로 사용할 수 있음
# 파이썬의 사전 자료형은 해시 테이블을 이용하므로 데이터의 조회 및 수정에 있어서 O(1)의 시간에 처리할 수 있음

# 사전과 같이 Key값으로 접근했을 때 Value 확인

data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'

if '사과' in data:
    print("'사과'를 키로 가지는 데이터가 존재합니다.")
print(data.keys())
print(data.values())

for key in data:
    print(data[key])

b = {
    '홍길동' : 97,
    '이순신' : 98
}
print(b.keys())
key_list = list(b.keys())
print(key_list)

# 4. 집합 자료형
# 중복을 허용하지 않음
# 순서가 없음
# 집합은 리스트 혹은 문자열을 이용해서 초기화할 수 있음
#     - 이 때 set()함수를 이용
# 혹은 중괄호({})안에 각 원소를 콤마(,)를 기준으로 구분하여 삽입함으로써 초기화할 수 있음
# 데이터의 조회 및 수정에 있어서 O(1)의 시간에 처리할 수 있음

# 집합 자료형 초기화 방법 1
data = set([1, 1, 2, 3, 4, 4, 5])
print(data)

# 집합 자료형 초기화 방법 2
data = {1, 1, 2, 3, 4, 4, 5}
print(data)

# 집합 자료형의 연산
#  : 합집합, 교집합, 차집합
a = {1, 2, 3, 4, 5}
b = {3, 4, 5, 6, 7}

print(a | b)
print(a & b)
print(a - b)

data = {1, 2, 3}

data.add(4) # 원소 한 개 추가
print(data)
data.update([5, 6]) # 원소 여러 개 추가
print(data)
data.remove(3) # 특정값 원소 제거
print(data)

# 사전 자료형과 집합 자료형의 특징
# 리스트나 튜플은 순서가 있기 때문에 인덱싱을 통해 자료형의 값을 얻을 수 있음
# 사전 자료형과 집합 자료형은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없음
#     - 사전의 키(Key) 혹은 집합의 원소(Element)를 이용해 O(1)의 시간 복잡도로 조회