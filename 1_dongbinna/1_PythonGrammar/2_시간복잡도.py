# 시간 복잡도 계산해보기

# 시간 복잡도 : O(N)
array = [3, 5, 1, 2, 4] # 5개의 데이터 (N = 5)
summary = 0 # 합계를 저장할 변수

# 모든 데이터를 하나씩 확인하며 합계를 계산
for x in array:
    summary += x

# 결과를 출력
print('시간 복잡도 : O(N)')
print('결과 : {}'.format(summary))

# 수행 시간은 데이터의 개수 N에 비례할 것임을 예측

# 시간 복잡도 : O(N^2)
array = [3, 5, 1, 2, 4] # 5개의 데이터 (N = 5)

print('\n시간 복잡도 : O(N^2)')
for i in array:
    for j in array:
        temp = i * j
        print('결과 : {}'.format(temp))

# 참고로 모든 2중 반복문의 시간복잡도가 O(N^2)인 것은 아님
# 소스코드가 내부적으로 다른 함수를 호출한다면 그 함수의 사간 복잡도까지 고려 필요하다.

# 일반적으로 CPU 기반의 개인 컴퓨터나 채점용 컴퓨터에서 연산 횟수가 5억을 넘어가는 경우 :
# C언어를 기준으로 통상 1~3초 가량의 시간 소요
# Python을 기준으로 통상 5~15초 가량의 시간 소요
#   PyPy의 경우 때때로 C언어보다도 빠르게 동작하기도 함.
# O(N^3)의 알고리즘을 설계한 경우, N의 값이 5,000을 넘는다면 얼마나 걸릴까?

# 문제에서 가장 먼저 확인해야 하는 내용은 시간제한(수행시간 요구사항)입니다.
# 시간제한이 1초인 문제를 만났을 때, 일반적인 기준은 다음과 같음
# N의 범위가 500인 경우 : 시간 복잡도가 O(N^3)인 알고리즘을 설계하면 문제를 풀 수 있다.
# N의 범위가 2,000인 경우 : 시간 복잡도가 O(N^2)인 알고리즘을 설계하면 문제를 풀 수 있다.
# N의 범위가 100,000인 경우 : 시간 복잡도가 O(NlogN)인 알고리즘을 설계하면 문제를 풀 수 있다.
# N의 범위가 10,000,000인 경우 : 시간 복잡도가 O(N)인 알고리즘을 설계하면 문제를 풀 수 있다.
