# 여러 개의 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형
# : 리스트 대신 배열 혹은 테이블이라고 부르기도 합니다.

# 리스트 초기화
# 리스트는 대괄호([])안에 원소를 넣어 초기화하며, 쉼표(,)로 원소를 구분합니다.
# 비어 있는 리스트를 선언하고자 할 때는 list() 혹은 간단히 []를 이용할 수 있습니다.
# 리스트의 원소에 접근할 때는 인덱스(Index) 값을 괄호에 넣습니다.
#  : 인덱스는 0부터 시작

# 직접 데이터를 넣어 초기화
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)

# 네 번째 원소만 출력
print(a[3])

# 크기가 N이고, 모든 값이 0인 1차원 리스트 초기화
n = 10
# 0이 10번 들어가는 방식
a = [0] * n
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
print(a)

# 인덱싱(Indexing) : 리스트의 특정한 원소에 접근하는 것
# 파이썬은 양의 정수 & 음의 정수 모두 사용 가능
# 음의 정수를 넣으면 원소를 거꾸로 탐색

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# 여덟 번째 원소만 출력
print(a[7])

# 뒤에서 첫 번째
print(a[-1])
# 9

# 슬라이싱(Slicing) : 연속적인 위치를 갖는 원소들을 가져올 때
# 대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 끝 인덱스를 설정
# 끝 인덱스는 실제 인덱스보다 1을 더 크게 설정

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# 두 번째 원소부터 4번째 원소까지
print(a[1:4])

# 리스트 컴프리헨션
# 리스트를 초기화하는 방법 중 하나
# - 대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화
#  - 주의 : 아직 조건문과 반복문에 대한 내용을 배우기 전이라면 대략적인 쓰임새만 이해

# 리스트 컴프리헨션 : 간결하고 짧게 작성할 수 있음
array = [i for i in range(10)]

print('-- List Comprehension --')
print(array)

print('-- List Comprehension 예제 --')
# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i % 2 == 1]
print(array)

# 1부터 9까지의 수들의 제곱 값을 포함하는 리스트
array = [i * i for i in range(1, 10)]
print(array)

print('-- List Comprehension VS 일반적인 코드 --')
# 코드 1 : 리스트 컴프리헨션
# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i % 2 == 1]
print(array)

# 코드 2 : 일반적인 코드
array = []
for i in range(20):
    if i % 2 == 1:
        array.append(i)

print(array)

print('-- List Comprehension의 특징 --')
# 2차원 리스트를 초기화할 때 효과적으로 사용
# 특히 N X M 크기의 2차원 리스트를 한 번에 초기화할 때 유용
#     - 예시 : array = [[0] * m for_in range(n)]

# 만약 2차원 리스트를 초기화할 때 다음과 같이 작성하면 좋지 않음
#     - 예시 : array[[0] * m] * n
#     - 위 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식